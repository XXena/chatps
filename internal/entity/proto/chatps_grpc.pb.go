// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatPSClient is the client API for ChatPS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatPSClient interface {
	// A Bidirectional streaming RPC.
	Exchange(ctx context.Context, opts ...grpc.CallOption) (ChatPS_ExchangeClient, error)
}

type chatPSClient struct {
	cc grpc.ClientConnInterface
}

func NewChatPSClient(cc grpc.ClientConnInterface) ChatPSClient {
	return &chatPSClient{cc}
}

func (c *chatPSClient) Exchange(ctx context.Context, opts ...grpc.CallOption) (ChatPS_ExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatPS_ServiceDesc.Streams[0], "/chatps.internal.service.proto.ChatPS/Exchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatPSExchangeClient{stream}
	return x, nil
}

type ChatPS_ExchangeClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatPSExchangeClient struct {
	grpc.ClientStream
}

func (x *chatPSExchangeClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatPSExchangeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatPSServer is the server API for ChatPS service.
// All implementations must embed UnimplementedChatPSServer
// for forward compatibility
type ChatPSServer interface {
	// A Bidirectional streaming RPC.
	Exchange(ChatPS_ExchangeServer) error
	mustEmbedUnimplementedChatPSServer()
}

// UnimplementedChatPSServer must be embedded to have forward compatible implementations.
type UnimplementedChatPSServer struct {
}

func (UnimplementedChatPSServer) Exchange(ChatPS_ExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedChatPSServer) mustEmbedUnimplementedChatPSServer() {}

// UnsafeChatPSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatPSServer will
// result in compilation errors.
type UnsafeChatPSServer interface {
	mustEmbedUnimplementedChatPSServer()
}

func RegisterChatPSServer(s grpc.ServiceRegistrar, srv ChatPSServer) {
	s.RegisterService(&ChatPS_ServiceDesc, srv)
}

func _ChatPS_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatPSServer).Exchange(&chatPSExchangeServer{stream})
}

type ChatPS_ExchangeServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatPSExchangeServer struct {
	grpc.ServerStream
}

func (x *chatPSExchangeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatPSExchangeServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatPS_ServiceDesc is the grpc.ServiceDesc for ChatPS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatPS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatps.internal.service.proto.ChatPS",
	HandlerType: (*ChatPSServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exchange",
			Handler:       _ChatPS_Exchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chatps.proto",
}
